--!strict
-- Melhorado Anti-Kick & Bypass de Crash com tratamento adequado de desligamento do jogo
pcall(function()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local mt = getrawmetatable(game)
    local gameShuttingDown = false

    -- Ouvir o desligamento do jogo
    game:BindToClose(function()
        gameShuttingDown = true
    end)

    if setreadonly then setreadonly(mt, false) end

    local oldNamecall = mt.__namecall
    local oldIndex = mt.__index

    mt.__namecall = newcclosure(function(self, ...)
        if gameShuttingDown then return oldNamecall(self, ...) end
        
        local method = getnamecallmethod()
        if typeof(method) == "string" and method:lower() == "kick" then
            warn("Tentativa de kick bloqueada via __namecall")
            return nil
        end
        return oldNamecall(self, ...)
    end)

    mt.__index = newcclosure(function(self, key)
        if gameShuttingDown then return oldIndex(self, key) end
        
        if typeof(key) == "string" then
            local lowered = key:lower()
            if lowered == "kick" then
                warn("Tentativa de kick bloqueada via __index")
                return function() end
            elseif (lowered == "breakjoints" or lowered == "destroy") and not gameShuttingDown then
                warn("Método destrutivo '"..key.."' bloqueado via __index")
                return function() end
            end
        end
        return oldIndex(self, key)
    end)

    if LocalPlayer then
        local originalKick = LocalPlayer.Kick
        LocalPlayer.Kick = function(self, ...)
            if not gameShuttingDown then
                warn("Tentativa de kick bloqueada via override .Kick")
                return nil
            end
            return originalKick(self, ...)
        end
    end

    local function protectCharacter(char)
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                local originalDestroy = part.Destroy
                part.Destroy = function(self, ...)
                    if not gameShuttingDown then
                        warn("Tentativa de destruir parte do personagem: " .. part.Name)
                        return nil
                    end
                    return originalDestroy(self, ...)
                end
            end
        end
        local hum = char:FindFirstChildWhichIsA("Humanoid")
        if hum then
            hum.BreakJointsOnDeath = false
        end
    end

    if LocalPlayer.Character then
        protectCharacter(LocalPlayer.Character)
    end
    LocalPlayer.CharacterAdded:Connect(protectCharacter)

    if setreadonly then setreadonly(mt, true) end
end)

-- Carregar RedzLib
local success, redzlib = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()
end)

if not success then
    warn("Falha ao carregar RedzLib:", redzlib)
    return
end

-- Criar Interface
local Window = redzlib:MakeWindow({
    Title = "Zeta Hub X Roube um brainrot",
    SubTitle = "por S I L E N T",
    SaveFolder = "ZetaHubUniversal"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://100006760882280", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(0, 6) },
})

-- Serviços
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

-- Referências de Jogador e Personagem
local LocalPlayer = Players.LocalPlayer
local character, humanoid
local markedLocation = nil
local baseBlockLocation = nil

local function updateReferences()
    character = LocalPlayer.Character
    humanoid = character and character:FindFirstChildOfClass("Humanoid") or nil
end

LocalPlayer.CharacterAdded:Connect(updateReferences)
LocalPlayer.CharacterRemoving:Connect(function()
    character = nil
    humanoid = nil
end)

updateReferences()

-- Aba Discord
local TabDiscord = Window:MakeTab({
    Title = "Discord",
    Icon = "rbxassetid://84198990394879"
})

TabDiscord:AddSection("Discord")
TabDiscord:AddDiscordInvite({
    Name = "Zeta Hub",
    Description = "Junte-se à comunidade",
    Logo = "rbxassetid://88800066762467",
    Invite = "https://discord.gg/pzrtAEDBbt"
})

-- Aba Segurança
local TabSecurity = Window:MakeTab({
    Title = "Segurança",
    Icon = "rbxassetid://7072718262"
})

TabSecurity:AddSection("Ferramentas Base")

TabSecurity:AddButton({
    Title = "Marcar Localização do Bloco Base",
    Description = "Salva sua posição atual como referência do bloco base",
    Callback = function()
        if not character then updateReferences() end
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp then
            baseBlockLocation = hrp.Position
            print("Localização do bloco base marcada em:", baseBlockLocation)
        else
            warn("HumanoidRootPart não encontrado")
        end
    end
})

TabSecurity:AddButton({
    Title = "Teleportar para Bloco Base",
    Description = "Teleporta instantaneamente para a localização salva do bloco base",
    Callback = function()
        if not character then updateReferences() end
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp and baseBlockLocation then
            hrp.CFrame = CFrame.new(baseBlockLocation)
            print("Teleportado para bloco base")
        else
            warn("HumanoidRootPart faltando ou nenhuma localização marcada")
        end
    end
})

TabSecurity:AddButton({
    Title = "Teleportar para Sua Base Lateral",
    Description = "Teleporta para o PlotBlock da base atual em que você está",
    Callback = function()
        if not character then updateReferences() end
        if not character then repeat task.wait() until character end

        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local sideModel = nil
        for _, base in pairs(workspace:GetChildren()) do
            if base:IsA("Model") and base.Name:match("^%d+ Side$") then
                if character:IsDescendantOf(base) then
                    sideModel = base
                    break
                end
            end
        end

        if sideModel then
            local plot = sideModel:FindFirstChild("PlotBlock", true)
            if plot then
                hrp.CFrame = plot.CFrame + Vector3.new(0, 5, 0)
                print("Teleportado para PlotBlock:", sideModel.Name)
            else
                warn("PlotBlock não encontrado em", sideModel.Name)
            end
        else
            warn("Nenhuma base detectada")
        end
    end
})

-- Aba Principal
local TabMain = Window:MakeTab({
    Title = "Principal",
    Icon = "rbxassetid://106319096400681"
})

TabMain:AddSection("Movimento")

TabMain:AddButton({
    Title = "Marcar Localização",
    Description = "Salva sua posição atual para teleporte",
    Callback = function()
        if not character then updateReferences() end
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp then
            markedLocation = hrp.Position
            print("Localização marcada em:", markedLocation)
        else
            warn("HumanoidRootPart não encontrado")
        end
    end
})

TabMain:AddButton({
    Title = "Teleporte Suave para Localização Marcada",
    Description = "Teleporte suave com passagem por paredes e imunidade",
    Callback = function()
        if not character then updateReferences() end
        if not character then return end
        
        local hrp = character:FindFirstChild("HumanoidRootPart")
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not hrp or not humanoid or not markedLocation then return end

        local originalHealth = humanoid.Health
        local immune = true
        local healthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if immune and humanoid.Health < originalHealth then
                humanoid.Health = originalHealth
            end
        end)

        local affectedParts = {}
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                table.insert(affectedParts, { part = part, t = part.Transparency, c = part.CanCollide })
                part.Transparency = 1
                part.CanCollide = false
            elseif part:IsA("Decal") then
                part.Transparency = 1
            end
        end

        local removedWalls = {}
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") and obj.Name:lower():find("wall") then
                table.insert(removedWalls, { part = obj, t = obj.Transparency, c = obj.CanCollide })
                obj.Transparency = 1
                obj.CanCollide = false
            end
        end

        local dist = (hrp.Position - markedLocation).Magnitude
        local tweenInfo = TweenInfo.new(dist / 40, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(markedLocation + Vector3.new(0, 3, 0))})
        tween:Play()

        tween.Completed:Connect(function()
            immune = false
            if healthConn then healthConn:Disconnect() end
            for _, data in ipairs(affectedParts) do
                if data.part and data.part.Parent then
                    data.part.Transparency = data.t
                    data.part.CanCollide = data.c
                end
            end
            for _, data in ipairs(removedWalls) do
                if data.part and data.part.Parent then
                    data.part.Transparency = data.t
                    data.part.CanCollide = data.c
                end
            end
        end)
    end
})

-- Alternar Anti-Ragdoll
TabMain:AddSection("Anti-Ragdoll")

local antiRagdollEnabled = false
local antiRagdollConnection

TabMain:AddToggle({
    Title = "Anti-Ragdoll",
    Description = "Previne que seu personagem vire um ragdoll",
    Default = false,
    Callback = function(state)
        antiRagdollEnabled = state
        if state then
            warn("Anti-Ragdoll ativado")
            if antiRagdollConnection then antiRagdollConnection:Disconnect() end
            
            antiRagdollConnection = RunService.Heartbeat:Connect(function()
                if not character then 
                    updateReferences()
                    if not character then return end
                end
                
                for _, limb in ipairs({"Left Arm", "Right Arm", "Left Leg", "Right Leg", "Head", "Torso", "UpperTorso", "LowerTorso"}) do
                    local part = character:FindFirstChild(limb)
                    if part then
                        for _, c in ipairs(part:GetChildren()) do
                            if c:IsA("BallSocketConstraint") or c:IsA("HingeConstraint") then
                                c:Destroy()
                            end
                        end
                    end
                end
                
                for _, joint in ipairs(character:GetDescendants()) do
                    if joint:IsA("Motor6D") and joint.Parent then
                        joint.Enabled = true
                    end
                end
            end)
        else
            warn("Anti-Ragdoll desativado")
            if antiRagdollConnection then
                antiRagdollConnection:Disconnect()
                antiRagdollConnection = nil
            end
        end
    end
})
